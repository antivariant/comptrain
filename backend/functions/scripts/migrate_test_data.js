// ‚úÖ –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è `sections` –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ `compositions`
const admin = require("firebase-admin");
const path = require("path");

const serviceAccount = require(path.join(__dirname, "serviceAccountKey.json"));

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  projectId: "comptrain-4ab99",
});

const db = admin.firestore();

function normalizeSection(section = "") {
  const map = {
    "–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ": "Intro",
    "–∫—É–ø–ª–µ—Ç": "Verse",
    "–ø—Ä–∏–ø–µ–≤": "Chorus",
    "–±—Ä–∏–¥–∂": "Bridge",
    "–∫–æ–¥–∞": "Coda"
  };
  return map[section.toLowerCase()] || section;
}

async function cleanCompositionSections() {
  const snap = await db.collection("compositions").get();

  for (const doc of snap.docs) {
    const data = doc.data();
    const updated = { ...data };

    delete updated.sections;

    if (Array.isArray(updated.parts)) {
      updated.parts = updated.parts.map(part => ({
        ...part,
        section: normalizeSection(part.section)
      }));
    }

    await doc.ref.set(updated, { merge: true });
    console.log(`‚úÖ updated composition: ${doc.id}`);
  }

  console.log("üéØ –ü–æ–ª–µ 'sections' —É–¥–∞–ª–µ–Ω–æ –∏ section –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤–æ –≤—Å–µ—Ö –∫–æ–º–ø–æ–∑–∏—Ü–∏—è—Ö.");
}

cleanCompositionSections().catch(console.error);
