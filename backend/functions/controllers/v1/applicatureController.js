const sequenceToApplicature = require('../../services/sequenceToApplicature');

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–ø–ø–ª–∏–∫–∞—Ç—É—Ä—É –ø–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–∫–∫–æ—Ä–¥–æ–≤.
 *
 * @route POST /generateApplicature
 * @route POST /v1/applicature
 *
 * @param {Object} req - HTTP-–∑–∞–ø—Ä–æ—Å
 * @param {Object} req.body - –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
 * @param {string[]} req.body.chords - –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –∞–∫–∫–æ—Ä–¥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ['C', 'F', 'G'])
 * @param {Object} res - HTTP-–æ—Ç–≤–µ—Ç
 *
 * @returns {Promise<void>} –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç JSON-–º–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤ NoteMarker'–æ–≤
 *
 * @example
 * // –í—Ö–æ–¥:
 * { "chords": ["C", "F", "G"] }
 *
 * // –û—Ç–≤–µ—Ç:
 * [
 *   [ { noteCode: "1", degree: "I", isChanged: true }, ... ],
 *   [ { noteCode: "3#", degree: "III", isChanged: false }, ... ],
 *   ...
 * ]
 *
 * NoteMarker:
 * - noteCode: {string} ‚Äî –∫–æ–¥ –Ω–æ—Ç—ã ("1", "3#", "5b")
 * - degree: {"I"|"III"|"V"} ‚Äî —Ä–æ–ª—å –Ω–æ—Ç—ã –≤ –∞–∫–∫–æ—Ä–¥–µ
 * - isChanged: {boolean} ‚Äî –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ –Ω–æ—Ç–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∞–∫–∫–æ—Ä–¥–æ–º
 *
 * @throws {Error} –ï—Å–ª–∏ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */
exports.getApplicature = (req, res) => {
  const { chords } = req.body;

  console.log('[ApplicatureController] Incoming chords:', chords);

  // üîç –í–∞–ª–∏–¥–∞—Ü–∏—è: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤ –Ω–µ–ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
  if (!Array.isArray(chords)) {
    console.error('[ApplicatureController] Invalid input: chords must be an array');
    return res.status(400).json({ error: 'Invalid input: chords must be an array of strings' });
  }

  const invalidChord = chords.find(ch => typeof ch !== 'string' || !ch.trim());
  if (invalidChord !== undefined) {
    console.error('[ApplicatureController] Invalid chord in array:', invalidChord);
    return res.status(400).json({ error: 'Each chord must be a non-empty string' });
  }

  try {
    const applicatureMatrix = sequenceToApplicature(chords);

    const response = applicatureMatrix.map(chordMarkers =>
      chordMarkers.map(marker => ({
        noteCode: marker.noteCode ?? '',
        degree: marker.degree ?? '',
        isChanged: !!marker.isChanged,
      }))
    );

    console.log('[ApplicatureController] Generated applicature:', JSON.stringify(response));
    res.status(200).json(response);
  } catch (error) {
    console.error('[ApplicatureController] Applicature generation error:', error);
    res.status(500).json({ error: error.message });
  }
};
