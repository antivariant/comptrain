import 'package:flutter_test/flutter_test.dart';
import 'package:frontend/domains/models/note_marker.dart';
import 'package:frontend/utils/chord_applicature.dart';

void main() {
  group('generateApplicature Em–C–G', () {
    final result = generateApplicature(['Em', 'C', 'G']);

    test('Em -> 3, 5, 7', () {
      expect(result[0].map((e) => e.noteCode), ['3', '5', '7']);
      expect(result[0].map((e) => e.degree), [NoteDegree.I, NoteDegree.III, NoteDegree.V]);
      expect(result[0].map((e) => e.isChanged), [true, true, true]);
    });

    test('C -> 3, 5, 8', () {
      expect(result[1].map((e) => e.noteCode), ['3', '5', '8']);
      expect(result[1].map((e) => e.degree), [NoteDegree.III, NoteDegree.V, NoteDegree.I]);
      expect(result[1].map((e) => e.isChanged), [false, false, true]);
    });

    test('G -> 2, 5, 7', () {
      expect(result[2].map((e) => e.noteCode), ['2', '5', '7']);
      expect(result[2].map((e) => e.degree), [NoteDegree.V, NoteDegree.I, NoteDegree.III]);
      expect(result[2].map((e) => e.isChanged), [true, false, true]);
    });
  });

  group('generateApplicature F#m–E–D–Em–A', () {
    final result = generateApplicature(['F#m', 'E', 'D', 'Em', 'A']);
    

    test('F#m -> 1#, 4#, 6', () {
      expect(result[0].map((e) => e.noteCode), ['1#', '4#', '6']);
      expect(result[0].map((e) => e.degree), [NoteDegree.I, NoteDegree.III, NoteDegree.V]);
    });

    test('E -> 3, 5#, 7', () {
      expect(result[1].map((e) => e.noteCode), ['3', '5#', '7']);
    });

    test('D -> 2, 4#, 6', () {
      expect(result[2].map((e) => e.noteCode), ['2', '4#', '6']);
    });

    test('Em -> 3, 5, 7', () {
      expect(result[3].map((e) => e.noteCode), ['3', '5', '7']);
    });

    test('A -> 1#, 3, 6', () {
      expect(result[4].map((e) => e.noteCode), ['1#', '3', '6']);
    });
  });

  group('generateApplicature Dm–F–C–E', () {
    final result = generateApplicature(['Dm', 'F', 'C', 'E']);

    test('Dm -> 2, 4, 6', () {
      expect(result[0].map((e) => e.noteCode), ['2', '4', '6']);
    });

    test('F -> 1, 4, 6', () {
      expect(result[1].map((e) => e.noteCode), ['1', '4', '6']);
    });

    test('C -> 1, 3, 5', () {
      expect(result[2].map((e) => e.noteCode), ['1', '3', '5']);
    });

    test('E -> 3, 5#, 7', () {
      expect(result[3].map((e) => e.noteCode), ['3', '5#', '7']);
    });
  });
}
