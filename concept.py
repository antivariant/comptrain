import random

# --- –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ –∞–∫–∫–æ—Ä–¥–æ–≤: (—Å—Ç—É–ø–µ–Ω–∏, –ø—Ä–∏–º–µ—Ä) ---
chord_progressions = [
    ("i-vi-III-VII", "W.A.S.P. ‚Äì Sleeping (In‚ÄØThe‚ÄØFire) ‚Äì –∫—É–ø–ª–µ—Ç"),
    ("I-V-vi-IV", "Cinderella ‚Äì Don‚Äôt Know What You Got ‚Äì –ø—Ä–∏–ø–µ–≤"),
    ("VI-VII-i-iv", "Kingdom Come ‚Äì What Love Can Be ‚Äì –ø—Ä–∏–ø–µ–≤"),
    ("I-V-vi-IV", "Aerosmith ‚Äì I Don‚Äôt Want to Miss a Thing ‚Äì –∫—É–ø–ª–µ—Ç"),
    ("i-iv-V-i", "Scorpions ‚Äì Still Loving You ‚Äì –∫—É–ø–ª–µ—Ç"),
    ("vi-IV-I-V", "Ozzy Osbourne ‚Äì Mama I‚Äôm Coming Home ‚Äì –∫—É–ø–ª–µ—Ç"),
    ("i-iv-VII-III", "Guns N‚Äô Roses ‚Äì Don‚Äôt Cry ‚Äì –∫—É–ø–ª–µ—Ç"),
    ("I-V-vi-IV", "Bon Jovi ‚Äì Always ‚Äì –∫—É–ø–ª–µ—Ç"),
    ("I-V-vi-IV", "Skid Row ‚Äì I Remember You ‚Äì –ø—Ä–∏–ø–µ–≤"),
    ("I-bVII-IV", "Guns N‚Äô Roses ‚Äì Patience ‚Äì –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ"),
]

# --- –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –∞–∫–∫–æ—Ä–¥—ã ---
scales = {
    "Am":  ["Am", "Bm‚ô≠5", "C", "Dm", "Em", "F", "G"],
    "Em":  ["Em", "F#dim", "G", "Am", "Bm", "C", "D"],
    "G":   ["G", "Am", "Bm", "C", "D", "Em", "F#dim"],
    "D":   ["D", "Em", "F#m", "G", "A", "Bm", "C#dim"],
    "Bm":  ["Bm", "C#dim", "D", "Em", "F#m", "G", "A"],
    "F#m": ["F#m", "G#dim", "A", "Bm", "C#m", "D", "E"],
    "E":   ["E", "F#m", "G#m", "A", "B", "C#m", "D#dim"],
    "Eb":  ["Eb", "Fm", "Gm", "Ab", "Bb", "Cm", "Ddim"],
}

# --- –†–∏—Ç–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã ---
rhythmic_patterns = [
    ("I : X-1-(2,3)-1", "Bon Jovi ‚Äì Always"),
    ("I - V : (1,2,3)-X-(1,2,3)-X", "The Beatles ‚Äì Let It Be"),
    ("I - V - I - V : 1-2-3-2", "Scorpions ‚Äì Still Loving You"),
    ("I - V : 1-2-3-1-2-3", "Journey ‚Äì Open Arms (6/8)"),
    ("I : X-(1,2,3)-(1,2,3)", "Guns N‚Äô Roses ‚Äì Patience (3/4)"),
]

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—É–ø–µ–Ω–µ–π ---
def transpose_degrees_to_chords(scale_name, degrees_str):
    scale = scales[scale_name]
    degree_map = {
        "I": 0, "II": 1, "III": 2, "IV": 3, "V": 4, "VI": 5, "VII": 6,
        "i": 0, "ii": 1, "iii": 2, "iv": 3, "v": 4, "vi": 5, "vii": 6,
        "bVII": 6  # –≤ –º–∞–∂–æ—Ä–µ —ç—Ç–æ —Å—Ç—É–ø–µ–Ω—å –∏–∑ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –º–∏–Ω–æ—Ä–Ω–æ–≥–æ
    }
    chords = []
    for deg in degrees_str.replace("-", " ").split():
        if "b" in deg:
            base = deg.replace("b", "")
            idx = degree_map.get(base.upper(), 0) - 1
        else:
            idx = degree_map.get(deg, 0)
        chords.append(scale[idx % len(scale)])
    return chords

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫–≤–µ–Ω—Ü–∏–∏ ---
def generate_sequence():
    prog_degrees, song = random.choice(chord_progressions)
    tonality = random.choice(list(scales.keys()))
    chords = transpose_degrees_to_chords(tonality, prog_degrees)
    pattern, pattern_song = random.choice(rhythmic_patterns)

    print("üéµ –ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è:", prog_degrees, f"({song})")
    print(f"üéº –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å {tonality}:| ", " | ".join(chords)+" |")
    print(f"ü™ò –†–∏—Ç–º–∏—á–µ—Å–∫–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω (–∏–∑ {pattern_song}):")
    print(pattern)

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    generate_sequence()
